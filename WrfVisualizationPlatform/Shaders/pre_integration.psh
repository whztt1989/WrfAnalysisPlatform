//[FRAGMENT SHADER]
#version 330

uniform mat4 projection, modelView;
uniform sampler1D transferFunction;
uniform vec2 textureSize;
uniform int integraionOffset, integraionScale;

in vec3 texCoord;
in vec4 gl_FragCoord;
out vec4 gl_FragColor;

vec4 colorIntegration(in vec2 scalar)
{
    // Compute the step number for color integration
    int stepNumber = int(abs(scalar.x - scalar.y) * integraionScale) + integraionOffset;
    float stepSize = 1.0 / stepNumber;
    float delta = (scalar.y - scalar.x) * stepSize;
    float step = scalar.x;
    
    // Lookup color in transfer function texture
    vec4 interpolation = texture(transferFunction, step);
    
    // Initialize destination color
    vec4 color = vec4(interpolation.rgb, 1.0) * interpolation.a * stepSize;
    
    // Color integration
    for (int i = 0; i < stepNumber; i++)
    {
        step += delta;
        interpolation = texture(transferFunction, step);
        color += vec4(interpolation.rgb, 1.0) * interpolation.a * stepSize * (1.0 - color.a);
    }
    
    return color;
}

void main()
{
    gl_FragColor = colorIntegration(texCoord.xy);
}